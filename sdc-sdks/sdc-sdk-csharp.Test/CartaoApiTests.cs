using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Conductor.SDC.Client;
using Conductor.SDC.Api;
using Conductor.SDC.Model;

namespace Conductor.SDC.Test
{
    /// <summary>
    ///  Class for testing CartaoApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class CartaoApiTests
    {
        private CartaoApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
           instance = new CartaoApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CartaoApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            Assert.IsInstanceOf<CartaoApi> (instance, "instance is a CartaoApi");
        }

        
        /// <summary>
        /// Test BloquearUsingPUT
        /// </summary>
        [Test]
        public void BloquearUsingPUTTest()
        {
            // TODO: add unit test for the method 'BloquearUsingPUT'
            long? idConta = null; // TODO: replace null with proper value
            long? idCartao = null; // TODO: replace null with proper value
            
            var response = instance.BloquearUsingPUT(idConta, idCartao);
            Assert.IsInstanceOf<Response> (response, "response is Response"); 
        }
        
        /// <summary>
        /// Test CancelarUsingDELETE
        /// </summary>
        [Test]
        public void CancelarUsingDELETETest()
        {
            // TODO: add unit test for the method 'CancelarUsingDELETE'
            long? idConta = null; // TODO: replace null with proper value
            long? idCartao = null; // TODO: replace null with proper value
            
            var response = instance.CancelarUsingDELETE(idConta, idCartao);
            Assert.IsInstanceOf<Response> (response, "response is Response"); 
        }
        
        /// <summary>
        /// Test CreateUsingPOST
        /// </summary>
        [Test]
        public void CreateUsingPOSTTest()
        {
            // TODO: add unit test for the method 'CreateUsingPOST'
            long? idConta = null; // TODO: replace null with proper value
            Cartao cartao = null; // TODO: replace null with proper value
            
            var response = instance.CreateUsingPOST(idConta, cartao);
            Assert.IsInstanceOf<Cartao> (response, "response is Cartao"); 
        }
        
        /// <summary>
        /// Test CreditarUsingPUT
        /// </summary>
        [Test]
        public void CreditarUsingPUTTest()
        {
            // TODO: add unit test for the method 'CreditarUsingPUT'
            long? idConta = null; // TODO: replace null with proper value
            long? idCartao = null; // TODO: replace null with proper value
            double? valor = null; // TODO: replace null with proper value
            
            var response = instance.CreditarUsingPUT(idConta, idCartao, valor);
            Assert.IsInstanceOf<Response> (response, "response is Response"); 
        }
        
        /// <summary>
        /// Test DesbloquearUsingPUT
        /// </summary>
        [Test]
        public void DesbloquearUsingPUTTest()
        {
            // TODO: add unit test for the method 'DesbloquearUsingPUT'
            long? idConta = null; // TODO: replace null with proper value
            long? idCartao = null; // TODO: replace null with proper value
            
            var response = instance.DesbloquearUsingPUT(idConta, idCartao);
            Assert.IsInstanceOf<Response> (response, "response is Response"); 
        }
        
        /// <summary>
        /// Test ExtratosUsingPOST
        /// </summary>
        [Test]
        public void ExtratosUsingPOSTTest()
        {
            // TODO: add unit test for the method 'ExtratosUsingPOST'
            long? idConta = null; // TODO: replace null with proper value
            long? idCartao = null; // TODO: replace null with proper value
            
            var response = instance.ExtratosUsingPOST(idConta, idCartao);
            Assert.IsInstanceOf<Response> (response, "response is Response"); 
        }
        
        /// <summary>
        /// Test GetAllUsingGET
        /// </summary>
        [Test]
        public void GetAllUsingGETTest()
        {
            // TODO: add unit test for the method 'GetAllUsingGET'
            long? idConta = null; // TODO: replace null with proper value
            
            var response = instance.GetAllUsingGET(idConta);
            Assert.IsInstanceOf<List<Cartao>> (response, "response is List<Cartao>"); 
        }
        
        /// <summary>
        /// Test GetOneUsingGET
        /// </summary>
        [Test]
        public void GetOneUsingGETTest()
        {
            // TODO: add unit test for the method 'GetOneUsingGET'
            long? idConta = null; // TODO: replace null with proper value
            long? idCartao = null; // TODO: replace null with proper value
            
            var response = instance.GetOneUsingGET(idConta, idCartao);
            Assert.IsInstanceOf<Cartao> (response, "response is Cartao"); 
        }
        
        /// <summary>
        /// Test LimiteUsingGET
        /// </summary>
        [Test]
        public void LimiteUsingGETTest()
        {
            // TODO: add unit test for the method 'LimiteUsingGET'
            long? idConta = null; // TODO: replace null with proper value
            long? idCartao = null; // TODO: replace null with proper value
            
            var response = instance.LimiteUsingGET(idConta, idCartao);
            Assert.IsInstanceOf<Limite> (response, "response is Limite"); 
        }
        
        /// <summary>
        /// Test TransacionarUsingPUT
        /// </summary>
        [Test]
        public void TransacionarUsingPUTTest()
        {
            // TODO: add unit test for the method 'TransacionarUsingPUT'
            long? idConta = null; // TODO: replace null with proper value
            long? idCartao = null; // TODO: replace null with proper value
            double? valor = null; // TODO: replace null with proper value
            
            var response = instance.TransacionarUsingPUT(idConta, idCartao, valor);
            Assert.IsInstanceOf<Response> (response, "response is Response"); 
        }
        
        /// <summary>
        /// Test TransferirUsingPOST
        /// </summary>
        [Test]
        public void TransferirUsingPOSTTest()
        {
            // TODO: add unit test for the method 'TransferirUsingPOST'
            long? idConta = null; // TODO: replace null with proper value
            long? idCartao = null; // TODO: replace null with proper value
            long? idCartaoDestino = null; // TODO: replace null with proper value
            double? valor = null; // TODO: replace null with proper value
            
            var response = instance.TransferirUsingPOST(idConta, idCartao, idCartaoDestino, valor);
            Assert.IsInstanceOf<Response> (response, "response is Response"); 
        }
        
        /// <summary>
        /// Test UpdateUsingPUT
        /// </summary>
        [Test]
        public void UpdateUsingPUTTest()
        {
            // TODO: add unit test for the method 'UpdateUsingPUT'
            long? idConta = null; // TODO: replace null with proper value
            Cartao cartao = null; // TODO: replace null with proper value
            
            var response = instance.UpdateUsingPUT(idConta, cartao);
            Assert.IsInstanceOf<Cartao> (response, "response is Cartao"); 
        }
        
    }

}
