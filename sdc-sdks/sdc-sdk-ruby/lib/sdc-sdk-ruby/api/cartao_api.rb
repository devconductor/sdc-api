=begin
API SDC 2016

API desenvolvida para a 15\u00C2\u00AA semanda da computa\u00C3\u00A7\u00C3\u00A3o da UFPB em 2016

OpenAPI spec version: 1.0.0
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git

License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html

Terms of Service: http://pierlabs.io/terms/

=end

require "uri"

module SDC
  class CartaoApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Bloquear um cart\u00C3\u00A3o.
    # Bloquear um cart\u00C3\u00A3o.
    # @param id_conta ID da Conta
    # @param id_cartao Cart\u00C3\u00A3o a ser bloqueado
    # @param [Hash] opts the optional parameters
    # @return [Response]
    def bloquear_using_put(id_conta, id_cartao, opts = {})
      data, _status_code, _headers = bloquear_using_put_with_http_info(id_conta, id_cartao, opts)
      return data
    end

    # Bloquear um cart\u00C3\u00A3o.
    # Bloquear um cart\u00C3\u00A3o.
    # @param id_conta ID da Conta
    # @param id_cartao Cart\u00C3\u00A3o a ser bloqueado
    # @param [Hash] opts the optional parameters
    # @return [Array<(Response, Fixnum, Hash)>] Response data, response status code and response headers
    def bloquear_using_put_with_http_info(id_conta, id_cartao, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.bloquear_using_put ..."
      end
      
      
      # verify the required parameter 'id_conta' is set
      fail ArgumentError, "Missing the required parameter 'id_conta' when calling CartaoApi.bloquear_using_put" if id_conta.nil?
      
      
      
      
      
      
      # verify the required parameter 'id_cartao' is set
      fail ArgumentError, "Missing the required parameter 'id_cartao' when calling CartaoApi.bloquear_using_put" if id_cartao.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/v1/contas/{idConta}/cartoes/{idCartao}/bloquear".sub('{format}','json').sub('{' + 'idConta' + '}', id_conta.to_s).sub('{' + 'idCartao' + '}', id_cartao.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Response')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#bloquear_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancelar um cart\u00C3\u00A3o
    # Cancelar um determinado cart\u00C3\u00A3o
    # @param id_conta ID da Conta
    # @param id_cartao Cart\u00C3\u00A3o a ser cancelado
    # @param [Hash] opts the optional parameters
    # @return [Response]
    def cancelar_using_delete(id_conta, id_cartao, opts = {})
      data, _status_code, _headers = cancelar_using_delete_with_http_info(id_conta, id_cartao, opts)
      return data
    end

    # Cancelar um cart\u00C3\u00A3o
    # Cancelar um determinado cart\u00C3\u00A3o
    # @param id_conta ID da Conta
    # @param id_cartao Cart\u00C3\u00A3o a ser cancelado
    # @param [Hash] opts the optional parameters
    # @return [Array<(Response, Fixnum, Hash)>] Response data, response status code and response headers
    def cancelar_using_delete_with_http_info(id_conta, id_cartao, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.cancelar_using_delete ..."
      end
      
      
      # verify the required parameter 'id_conta' is set
      fail ArgumentError, "Missing the required parameter 'id_conta' when calling CartaoApi.cancelar_using_delete" if id_conta.nil?
      
      
      
      
      
      
      # verify the required parameter 'id_cartao' is set
      fail ArgumentError, "Missing the required parameter 'id_cartao' when calling CartaoApi.cancelar_using_delete" if id_cartao.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/v1/contas/{idConta}/cartoes/{idCartao}/cancelar".sub('{format}','json').sub('{' + 'idConta' + '}', id_conta.to_s).sub('{' + 'idCartao' + '}', id_cartao.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Response')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#cancelar_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cria um cart\u00C3\u00A3o
    # Voc\u00C3\u00AA pode criar um cart\u00C3\u00A3o ligado h\u00C3\u00A1 uma determinada conta.
    # @param id_conta ID da Conta
    # @param cartao Cart\u00C3\u00A3o a ser criado
    # @param [Hash] opts the optional parameters
    # @return [Cartao]
    def create_using_post(id_conta, cartao, opts = {})
      data, _status_code, _headers = create_using_post_with_http_info(id_conta, cartao, opts)
      return data
    end

    # Cria um cart\u00C3\u00A3o
    # Voc\u00C3\u00AA pode criar um cart\u00C3\u00A3o ligado h\u00C3\u00A1 uma determinada conta.
    # @param id_conta ID da Conta
    # @param cartao Cart\u00C3\u00A3o a ser criado
    # @param [Hash] opts the optional parameters
    # @return [Array<(Cartao, Fixnum, Hash)>] Cartao data, response status code and response headers
    def create_using_post_with_http_info(id_conta, cartao, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.create_using_post ..."
      end
      
      
      # verify the required parameter 'id_conta' is set
      fail ArgumentError, "Missing the required parameter 'id_conta' when calling CartaoApi.create_using_post" if id_conta.nil?
      
      
      
      
      
      
      # verify the required parameter 'cartao' is set
      fail ArgumentError, "Missing the required parameter 'cartao' when calling CartaoApi.create_using_post" if cartao.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/v1/contas/{idConta}/cartoes".sub('{format}','json').sub('{' + 'idConta' + '}', id_conta.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(cartao)
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Cartao')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#create_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creditar dinheiro em um cart\u00C3\u00A3o
    # Com esse m\u00C3\u00A9todo \u00C3\u00A9 possivel creditar qualquer valor em um cart\u00C3\u00A3o.
    # @param id_conta ID da Conta
    # @param id_cartao ID do Cartao a ser creditado
    # @param valor Valor a ser creditado
    # @param [Hash] opts the optional parameters
    # @return [Response]
    def creditar_using_put(id_conta, id_cartao, valor, opts = {})
      data, _status_code, _headers = creditar_using_put_with_http_info(id_conta, id_cartao, valor, opts)
      return data
    end

    # Creditar dinheiro em um cart\u00C3\u00A3o
    # Com esse m\u00C3\u00A9todo \u00C3\u00A9 possivel creditar qualquer valor em um cart\u00C3\u00A3o.
    # @param id_conta ID da Conta
    # @param id_cartao ID do Cartao a ser creditado
    # @param valor Valor a ser creditado
    # @param [Hash] opts the optional parameters
    # @return [Array<(Response, Fixnum, Hash)>] Response data, response status code and response headers
    def creditar_using_put_with_http_info(id_conta, id_cartao, valor, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.creditar_using_put ..."
      end
      
      
      # verify the required parameter 'id_conta' is set
      fail ArgumentError, "Missing the required parameter 'id_conta' when calling CartaoApi.creditar_using_put" if id_conta.nil?
      
      
      
      
      
      
      # verify the required parameter 'id_cartao' is set
      fail ArgumentError, "Missing the required parameter 'id_cartao' when calling CartaoApi.creditar_using_put" if id_cartao.nil?
      
      
      
      
      
      
      # verify the required parameter 'valor' is set
      fail ArgumentError, "Missing the required parameter 'valor' when calling CartaoApi.creditar_using_put" if valor.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/v1/contas/{idConta}/cartoes/{idCartao}/creditar".sub('{format}','json').sub('{' + 'idConta' + '}', id_conta.to_s).sub('{' + 'idCartao' + '}', id_cartao.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(valor)
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Response')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#creditar_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Desbloquear um cart\u00C3\u00A3o.
    # Desbloquear um determinado cart\u00C3\u00A3o.
    # @param id_conta ID da Conta
    # @param id_cartao Cart\u00C3\u00A3o a ser desbloqueado
    # @param [Hash] opts the optional parameters
    # @return [Response]
    def desbloquear_using_put(id_conta, id_cartao, opts = {})
      data, _status_code, _headers = desbloquear_using_put_with_http_info(id_conta, id_cartao, opts)
      return data
    end

    # Desbloquear um cart\u00C3\u00A3o.
    # Desbloquear um determinado cart\u00C3\u00A3o.
    # @param id_conta ID da Conta
    # @param id_cartao Cart\u00C3\u00A3o a ser desbloqueado
    # @param [Hash] opts the optional parameters
    # @return [Array<(Response, Fixnum, Hash)>] Response data, response status code and response headers
    def desbloquear_using_put_with_http_info(id_conta, id_cartao, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.desbloquear_using_put ..."
      end
      
      
      # verify the required parameter 'id_conta' is set
      fail ArgumentError, "Missing the required parameter 'id_conta' when calling CartaoApi.desbloquear_using_put" if id_conta.nil?
      
      
      
      
      
      
      # verify the required parameter 'id_cartao' is set
      fail ArgumentError, "Missing the required parameter 'id_cartao' when calling CartaoApi.desbloquear_using_put" if id_cartao.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/v1/contas/{idConta}/cartoes/{idCartao}/desbloquear".sub('{format}','json').sub('{' + 'idConta' + '}', id_conta.to_s).sub('{' + 'idCartao' + '}', id_cartao.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Response')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#desbloquear_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Extratos de transa\u00C3\u00A7oes
    # Retorna o extratos de transa\u00C3\u00A7oes de cr\u00C3\u00A9dito e d\u00C3\u00A9bito de um determinado cart\u00C3\u00A3o
    # @param id_conta ID da Conta
    # @param id_cartao ID do cart\u00C3\u00A3o
    # @param [Hash] opts the optional parameters
    # @return [Array<Extrato>]
    def extratos_using_post(id_conta, id_cartao, opts = {})
      data, _status_code, _headers = extratos_using_post_with_http_info(id_conta, id_cartao, opts)
      return data
    end

    # Extratos de transa\u00C3\u00A7oes
    # Retorna o extratos de transa\u00C3\u00A7oes de cr\u00C3\u00A9dito e d\u00C3\u00A9bito de um determinado cart\u00C3\u00A3o
    # @param id_conta ID da Conta
    # @param id_cartao ID do cart\u00C3\u00A3o
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Extrato>, Fixnum, Hash)>] Array<Extrato> data, response status code and response headers
    def extratos_using_post_with_http_info(id_conta, id_cartao, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.extratos_using_post ..."
      end
      
      
      # verify the required parameter 'id_conta' is set
      fail ArgumentError, "Missing the required parameter 'id_conta' when calling CartaoApi.extratos_using_post" if id_conta.nil?
      
      
      
      
      
      
      # verify the required parameter 'id_cartao' is set
      fail ArgumentError, "Missing the required parameter 'id_cartao' when calling CartaoApi.extratos_using_post" if id_cartao.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/v1/contas/{idConta}/cartoes/{idCartao}/extratos".sub('{format}','json').sub('{' + 'idConta' + '}', id_conta.to_s).sub('{' + 'idCartao' + '}', id_cartao.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Extrato>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#extratos_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retona todos os cart\u00C3\u00A3o de uma conta
    # Consulte todos os carteos de uma determinada conta.
    # @param id_conta ID da Conta
    # @param [Hash] opts the optional parameters
    # @return [Array<Cartao>]
    def get_all_using_get(id_conta, opts = {})
      data, _status_code, _headers = get_all_using_get_with_http_info(id_conta, opts)
      return data
    end

    # Retona todos os cart\u00C3\u00A3o de uma conta
    # Consulte todos os carteos de uma determinada conta.
    # @param id_conta ID da Conta
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Cartao>, Fixnum, Hash)>] Array<Cartao> data, response status code and response headers
    def get_all_using_get_with_http_info(id_conta, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.get_all_using_get ..."
      end
      
      
      # verify the required parameter 'id_conta' is set
      fail ArgumentError, "Missing the required parameter 'id_conta' when calling CartaoApi.get_all_using_get" if id_conta.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/v1/contas/{idConta}/cartoes".sub('{format}','json').sub('{' + 'idConta' + '}', id_conta.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Cartao>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#get_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retorna um cart\u00C3\u00A3o
    # Consulte um determinado cart\u00C3\u00A3o
    # @param id_conta ID da Conta
    # @param id_cartao ID do Cart\u00C3\u00A3o
    # @param [Hash] opts the optional parameters
    # @return [Cartao]
    def get_one_using_get(id_conta, id_cartao, opts = {})
      data, _status_code, _headers = get_one_using_get_with_http_info(id_conta, id_cartao, opts)
      return data
    end

    # Retorna um cart\u00C3\u00A3o
    # Consulte um determinado cart\u00C3\u00A3o
    # @param id_conta ID da Conta
    # @param id_cartao ID do Cart\u00C3\u00A3o
    # @param [Hash] opts the optional parameters
    # @return [Array<(Cartao, Fixnum, Hash)>] Cartao data, response status code and response headers
    def get_one_using_get_with_http_info(id_conta, id_cartao, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.get_one_using_get ..."
      end
      
      
      # verify the required parameter 'id_conta' is set
      fail ArgumentError, "Missing the required parameter 'id_conta' when calling CartaoApi.get_one_using_get" if id_conta.nil?
      
      
      
      
      
      
      # verify the required parameter 'id_cartao' is set
      fail ArgumentError, "Missing the required parameter 'id_cartao' when calling CartaoApi.get_one_using_get" if id_cartao.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/v1/contas/{idConta}/cartoes/{idCartao}".sub('{format}','json').sub('{' + 'idConta' + '}', id_conta.to_s).sub('{' + 'idCartao' + '}', id_cartao.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Cartao')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#get_one_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retorna o limite do cart\u00C3\u00A3o
    # Consultar o limite de um determinado cart\u00C3\u00A3o
    # @param id_conta ID da Conta
    # @param id_cartao ID do Cartao a ser creditado
    # @param [Hash] opts the optional parameters
    # @return [Limite]
    def limite_using_get(id_conta, id_cartao, opts = {})
      data, _status_code, _headers = limite_using_get_with_http_info(id_conta, id_cartao, opts)
      return data
    end

    # Retorna o limite do cart\u00C3\u00A3o
    # Consultar o limite de um determinado cart\u00C3\u00A3o
    # @param id_conta ID da Conta
    # @param id_cartao ID do Cartao a ser creditado
    # @param [Hash] opts the optional parameters
    # @return [Array<(Limite, Fixnum, Hash)>] Limite data, response status code and response headers
    def limite_using_get_with_http_info(id_conta, id_cartao, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.limite_using_get ..."
      end
      
      
      # verify the required parameter 'id_conta' is set
      fail ArgumentError, "Missing the required parameter 'id_conta' when calling CartaoApi.limite_using_get" if id_conta.nil?
      
      
      
      
      
      
      # verify the required parameter 'id_cartao' is set
      fail ArgumentError, "Missing the required parameter 'id_cartao' when calling CartaoApi.limite_using_get" if id_cartao.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/v1/contas/{idConta}/cartoes/{idCartao}/limite".sub('{format}','json').sub('{' + 'idConta' + '}', id_conta.to_s).sub('{' + 'idCartao' + '}', id_cartao.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Limite')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#limite_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Transacionar valores
    # Transacionar algum valor utilizando um determinado cart\u00C3\u00A3o
    # @param id_conta ID da Conta
    # @param id_cartao ID do Cartao a ser creditado
    # @param valor Valor da transa\u00C3\u00A7\u00C3\u00A3o
    # @param [Hash] opts the optional parameters
    # @return [Response]
    def transacionar_using_put(id_conta, id_cartao, valor, opts = {})
      data, _status_code, _headers = transacionar_using_put_with_http_info(id_conta, id_cartao, valor, opts)
      return data
    end

    # Transacionar valores
    # Transacionar algum valor utilizando um determinado cart\u00C3\u00A3o
    # @param id_conta ID da Conta
    # @param id_cartao ID do Cartao a ser creditado
    # @param valor Valor da transa\u00C3\u00A7\u00C3\u00A3o
    # @param [Hash] opts the optional parameters
    # @return [Array<(Response, Fixnum, Hash)>] Response data, response status code and response headers
    def transacionar_using_put_with_http_info(id_conta, id_cartao, valor, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.transacionar_using_put ..."
      end
      
      
      # verify the required parameter 'id_conta' is set
      fail ArgumentError, "Missing the required parameter 'id_conta' when calling CartaoApi.transacionar_using_put" if id_conta.nil?
      
      
      
      
      
      
      # verify the required parameter 'id_cartao' is set
      fail ArgumentError, "Missing the required parameter 'id_cartao' when calling CartaoApi.transacionar_using_put" if id_cartao.nil?
      
      
      
      
      
      
      # verify the required parameter 'valor' is set
      fail ArgumentError, "Missing the required parameter 'valor' when calling CartaoApi.transacionar_using_put" if valor.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/v1/contas/{idConta}/cartoes/{idCartao}/transacionar".sub('{format}','json').sub('{' + 'idConta' + '}', id_conta.to_s).sub('{' + 'idCartao' + '}', id_cartao.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(valor)
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Response')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#transacionar_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Transferir valores entre dois cart\u00C3\u00B5es distintos
    # Com esse m\u00C3\u00A9todo \u00C3\u00A9 permitido transferir qualquer valores entre dois cart\u00C3\u00B5es. Basta o cart\u00C3\u00A3o possuir limite e estar desbloqueado.
    # @param id_conta ID da Conta do cart\u00C3\u00A3o de origem
    # @param id_cartao ID do cart\u00C3\u00A3o de origem
    # @param id_cartao_destino ID do cart\u00C3\u00A3o de destino
    # @param valor Valor a ser transferido
    # @param [Hash] opts the optional parameters
    # @return [Response]
    def transferir_using_post(id_conta, id_cartao, id_cartao_destino, valor, opts = {})
      data, _status_code, _headers = transferir_using_post_with_http_info(id_conta, id_cartao, id_cartao_destino, valor, opts)
      return data
    end

    # Transferir valores entre dois cart\u00C3\u00B5es distintos
    # Com esse m\u00C3\u00A9todo \u00C3\u00A9 permitido transferir qualquer valores entre dois cart\u00C3\u00B5es. Basta o cart\u00C3\u00A3o possuir limite e estar desbloqueado.
    # @param id_conta ID da Conta do cart\u00C3\u00A3o de origem
    # @param id_cartao ID do cart\u00C3\u00A3o de origem
    # @param id_cartao_destino ID do cart\u00C3\u00A3o de destino
    # @param valor Valor a ser transferido
    # @param [Hash] opts the optional parameters
    # @return [Array<(Response, Fixnum, Hash)>] Response data, response status code and response headers
    def transferir_using_post_with_http_info(id_conta, id_cartao, id_cartao_destino, valor, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.transferir_using_post ..."
      end
      
      
      # verify the required parameter 'id_conta' is set
      fail ArgumentError, "Missing the required parameter 'id_conta' when calling CartaoApi.transferir_using_post" if id_conta.nil?
      
      
      
      
      
      
      # verify the required parameter 'id_cartao' is set
      fail ArgumentError, "Missing the required parameter 'id_cartao' when calling CartaoApi.transferir_using_post" if id_cartao.nil?
      
      
      
      
      
      
      # verify the required parameter 'id_cartao_destino' is set
      fail ArgumentError, "Missing the required parameter 'id_cartao_destino' when calling CartaoApi.transferir_using_post" if id_cartao_destino.nil?
      
      
      
      
      
      
      # verify the required parameter 'valor' is set
      fail ArgumentError, "Missing the required parameter 'valor' when calling CartaoApi.transferir_using_post" if valor.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/v1/contas/{idConta}/cartoes/{idCartao}/transferir".sub('{format}','json').sub('{' + 'idConta' + '}', id_conta.to_s).sub('{' + 'idCartao' + '}', id_cartao.to_s)

      # query parameters
      query_params = {}
      query_params[:'idCartaoDestino'] = id_cartao_destino

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(valor)
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Response')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#transferir_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Atualiza um cart\u00C3\u00A3o
    # Atualiza um determinado cart\u00C3\u00A3o
    # @param id_conta ID da Conta
    # @param cartao Cart\u00C3\u00A3o a ser atualizado
    # @param [Hash] opts the optional parameters
    # @return [Cartao]
    def update_using_put(id_conta, cartao, opts = {})
      data, _status_code, _headers = update_using_put_with_http_info(id_conta, cartao, opts)
      return data
    end

    # Atualiza um cart\u00C3\u00A3o
    # Atualiza um determinado cart\u00C3\u00A3o
    # @param id_conta ID da Conta
    # @param cartao Cart\u00C3\u00A3o a ser atualizado
    # @param [Hash] opts the optional parameters
    # @return [Array<(Cartao, Fixnum, Hash)>] Cartao data, response status code and response headers
    def update_using_put_with_http_info(id_conta, cartao, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.update_using_put ..."
      end
      
      
      # verify the required parameter 'id_conta' is set
      fail ArgumentError, "Missing the required parameter 'id_conta' when calling CartaoApi.update_using_put" if id_conta.nil?
      
      
      
      
      
      
      # verify the required parameter 'cartao' is set
      fail ArgumentError, "Missing the required parameter 'cartao' when calling CartaoApi.update_using_put" if cartao.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/v1/contas/{idConta}/cartoes".sub('{format}','json').sub('{' + 'idConta' + '}', id_conta.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(cartao)
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Cartao')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#update_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
