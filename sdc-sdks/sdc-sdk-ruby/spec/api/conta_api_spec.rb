=begin
PIER Labs

PIER Labs - Primeiro Hach Day SBC UFPB

OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git

License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html

Terms of Service: http://pierlabs.io/terms/

=end

require 'spec_helper'
require 'json'

# Unit tests for SDC::ContaApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'ContaApi' do
  before do
    # run before each test
    @instance = SDC::ContaApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ContaApi' do
    it 'should create an instact of ContaApi' do
      @instance.should be_a(SDC::ContaApi)
    end
  end

  # unit tests for create_using_post1
  # Cria uma conta
  # Cria uma conta
  # @param conta conta
  # @param [Hash] opts the optional parameters
  # @return [Conta]
  describe 'create_using_post1 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for delete_using_delete
  # Deleta uma conta
  # Deleta um cart\u00EF\u00BF\u00BDo
  # @param id id
  # @param [Hash] opts the optional parameters
  # @return [ResponseEntity]
  describe 'delete_using_delete test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_all_using_get1
  # Retorna todas as contas
  # Retorna todas as contas
  # @param [Hash] opts the optional parameters
  # @return [Array<Conta>]
  describe 'get_all_using_get1 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_one_using_get1
  # Retorna uma conta
  # Retorna uma conta
  # @param id id
  # @param [Hash] opts the optional parameters
  # @return [Conta]
  describe 'get_one_using_get1 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for update_using_put1
  # Atualiza uma conta
  # Atualiza uma conta
  # @param conta conta
  # @param [Hash] opts the optional parameters
  # @return [Conta]
  describe 'update_using_put1 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

end
