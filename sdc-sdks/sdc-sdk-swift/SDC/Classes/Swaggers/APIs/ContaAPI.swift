//
// ContaAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ContaAPI: APIBase {
    /**
     
     Cria uma conta
     
     - parameter conta: (body) conta 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createUsingPOST1(conta conta: Conta, completion: ((data: Conta?, error: ErrorType?) -> Void)) {
        createUsingPOST1WithRequestBuilder(conta: conta).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Cria uma conta
     
     - POST /v1/contas
     - Cria uma conta
     - API Key:
       - type: apiKey access_token 
       - name: access_token
     - examples: [{contentType=application/json, example={
  "nome" : "aeiou",
  "id" : 123456789
}}]
     
     - parameter conta: (body) conta 

     - returns: RequestBuilder<Conta> 
     */
    public class func createUsingPOST1WithRequestBuilder(conta conta: Conta) -> RequestBuilder<Conta> {
        let path = "/v1/contas"
        let URLString = SDCAPI.basePath + path
        
        let parameters = conta.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Conta>.Type = SDCAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Deleta uma conta
     
     - parameter id: (path) id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteUsingDELETE(id id: Int, completion: ((data: Response?, error: ErrorType?) -> Void)) {
        deleteUsingDELETEWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Deleta uma conta
     
     - DELETE /v1/contas/{id}
     - Deleta uma conta
     - API Key:
       - type: apiKey access_token 
       - name: access_token
     - examples: [{contentType=application/json, example={ }}]
     
     - parameter id: (path) id 

     - returns: RequestBuilder<Response> 
     */
    public class func deleteUsingDELETEWithRequestBuilder(id id: Int) -> RequestBuilder<Response> {
        var path = "/v1/contas/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SDCAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Response>.Type = SDCAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Retorna todas as contas
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getAllUsingGET1(completion: ((data: [Conta]?, error: ErrorType?) -> Void)) {
        getAllUsingGET1WithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Retorna todas as contas
     
     - GET /v1/contas
     - Retorna todas as contas
     - API Key:
       - type: apiKey access_token 
       - name: access_token
     - examples: [{contentType=application/json, example=[ {
  "nome" : "aeiou",
  "id" : 123456789
} ]}]

     - returns: RequestBuilder<[Conta]> 
     */
    public class func getAllUsingGET1WithRequestBuilder() -> RequestBuilder<[Conta]> {
        let path = "/v1/contas"
        let URLString = SDCAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<[Conta]>.Type = SDCAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Retorna uma conta
     
     - parameter id: (path) id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getOneUsingGET1(id id: Int, completion: ((data: Conta?, error: ErrorType?) -> Void)) {
        getOneUsingGET1WithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Retorna uma conta
     
     - GET /v1/contas/{id}
     - Retorna uma conta
     - API Key:
       - type: apiKey access_token 
       - name: access_token
     - examples: [{contentType=application/json, example={
  "nome" : "aeiou",
  "id" : 123456789
}}]
     
     - parameter id: (path) id 

     - returns: RequestBuilder<Conta> 
     */
    public class func getOneUsingGET1WithRequestBuilder(id id: Int) -> RequestBuilder<Conta> {
        var path = "/v1/contas/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SDCAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Conta>.Type = SDCAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Atualiza uma conta
     
     - parameter conta: (body) conta 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateUsingPUT1(conta conta: Conta, completion: ((data: Conta?, error: ErrorType?) -> Void)) {
        updateUsingPUT1WithRequestBuilder(conta: conta).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Atualiza uma conta
     
     - PUT /v1/contas
     - Atualiza uma conta
     - API Key:
       - type: apiKey access_token 
       - name: access_token
     - examples: [{contentType=application/json, example={
  "nome" : "aeiou",
  "id" : 123456789
}}]
     
     - parameter conta: (body) conta 

     - returns: RequestBuilder<Conta> 
     */
    public class func updateUsingPUT1WithRequestBuilder(conta conta: Conta) -> RequestBuilder<Conta> {
        let path = "/v1/contas"
        let URLString = SDCAPI.basePath + path
        
        let parameters = conta.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Conta>.Type = SDCAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

}
