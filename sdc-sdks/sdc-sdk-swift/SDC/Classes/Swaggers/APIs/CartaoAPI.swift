//
// CartaoAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class CartaoAPI: APIBase {
    /**
     
     Bloquear um cart\u00C3\u00A3o.
     
     - parameter idConta: (path) ID da Conta 
     - parameter idCartao: (path) Cart\u00C3\u00A3o a ser bloqueado 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func bloquearUsingPUT(idConta idConta: Int, idCartao: Int, completion: ((data: Response?, error: ErrorType?) -> Void)) {
        bloquearUsingPUTWithRequestBuilder(idConta: idConta, idCartao: idCartao).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Bloquear um cart\u00C3\u00A3o.
     
     - PUT /v1/contas/{idConta}/cartoes/{idCartao}/bloquear
     - Bloquear um cart\u00C3\u00A3o.
     - API Key:
       - type: apiKey access_token 
       - name: access_token
     - examples: [{contentType=application/json, example={
  "msg" : "aeiou"
}}]
     
     - parameter idConta: (path) ID da Conta 
     - parameter idCartao: (path) Cart\u00C3\u00A3o a ser bloqueado 

     - returns: RequestBuilder<Response> 
     */
    public class func bloquearUsingPUTWithRequestBuilder(idConta idConta: Int, idCartao: Int) -> RequestBuilder<Response> {
        var path = "/v1/contas/{idConta}/cartoes/{idCartao}/bloquear"
        path = path.stringByReplacingOccurrencesOfString("{idConta}", withString: "\(idConta)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{idCartao}", withString: "\(idCartao)", options: .LiteralSearch, range: nil)
        let URLString = SDCAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Response>.Type = SDCAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Cancelar um cart\u00C3\u00A3o
     
     - parameter idConta: (path) ID da Conta 
     - parameter idCartao: (path) Cart\u00C3\u00A3o a ser cancelado 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func cancelarUsingDELETE(idConta idConta: Int, idCartao: Int, completion: ((data: Response?, error: ErrorType?) -> Void)) {
        cancelarUsingDELETEWithRequestBuilder(idConta: idConta, idCartao: idCartao).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Cancelar um cart\u00C3\u00A3o
     
     - DELETE /v1/contas/{idConta}/cartoes/{idCartao}/cancelar
     - Cancelar um determinado cart\u00C3\u00A3o
     - API Key:
       - type: apiKey access_token 
       - name: access_token
     - examples: [{contentType=application/json, example={
  "msg" : "aeiou"
}}]
     
     - parameter idConta: (path) ID da Conta 
     - parameter idCartao: (path) Cart\u00C3\u00A3o a ser cancelado 

     - returns: RequestBuilder<Response> 
     */
    public class func cancelarUsingDELETEWithRequestBuilder(idConta idConta: Int, idCartao: Int) -> RequestBuilder<Response> {
        var path = "/v1/contas/{idConta}/cartoes/{idCartao}/cancelar"
        path = path.stringByReplacingOccurrencesOfString("{idConta}", withString: "\(idConta)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{idCartao}", withString: "\(idCartao)", options: .LiteralSearch, range: nil)
        let URLString = SDCAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Response>.Type = SDCAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Cria um cart\u00C3\u00A3o
     
     - parameter idConta: (path) ID da Conta 
     - parameter cartao: (body) Cart\u00C3\u00A3o a ser criado 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createUsingPOST(idConta idConta: Int, cartao: Cartao, completion: ((data: Cartao?, error: ErrorType?) -> Void)) {
        createUsingPOSTWithRequestBuilder(idConta: idConta, cartao: cartao).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Cria um cart\u00C3\u00A3o
     
     - POST /v1/contas/{idConta}/cartoes
     - Voc\u00C3\u00AA pode criar um cart\u00C3\u00A3o ligado h\u00C3\u00A1 uma determinada conta.
     - API Key:
       - type: apiKey access_token 
       - name: access_token
     - examples: [{contentType=application/json, example={
  "senha" : "aeiou",
  "cvv" : "aeiou",
  "numero" : "aeiou",
  "nome" : "aeiou",
  "id" : 123456789,
  "status" : "aeiou"
}}]
     
     - parameter idConta: (path) ID da Conta 
     - parameter cartao: (body) Cart\u00C3\u00A3o a ser criado 

     - returns: RequestBuilder<Cartao> 
     */
    public class func createUsingPOSTWithRequestBuilder(idConta idConta: Int, cartao: Cartao) -> RequestBuilder<Cartao> {
        var path = "/v1/contas/{idConta}/cartoes"
        path = path.stringByReplacingOccurrencesOfString("{idConta}", withString: "\(idConta)", options: .LiteralSearch, range: nil)
        let URLString = SDCAPI.basePath + path
        
        let parameters = cartao.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Cartao>.Type = SDCAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Creditar dinheiro em um cart\u00C3\u00A3o
     
     - parameter idConta: (path) ID da Conta 
     - parameter idCartao: (path) ID do Cartao a ser creditado 
     - parameter valor: (body) Valor a ser creditado 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func creditarUsingPUT(idConta idConta: Int, idCartao: Int, valor: Double, completion: ((data: Response?, error: ErrorType?) -> Void)) {
        creditarUsingPUTWithRequestBuilder(idConta: idConta, idCartao: idCartao, valor: valor).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Creditar dinheiro em um cart\u00C3\u00A3o
     
     - PUT /v1/contas/{idConta}/cartoes/{idCartao}/creditar
     - Com esse m\u00C3\u00A9todo \u00C3\u00A9 possivel creditar qualquer valor em um cart\u00C3\u00A3o.
     - API Key:
       - type: apiKey access_token 
       - name: access_token
     - examples: [{contentType=application/json, example={
  "msg" : "aeiou"
}}]
     
     - parameter idConta: (path) ID da Conta 
     - parameter idCartao: (path) ID do Cartao a ser creditado 
     - parameter valor: (body) Valor a ser creditado 

     - returns: RequestBuilder<Response> 
     */
    public class func creditarUsingPUTWithRequestBuilder(idConta idConta: Int, idCartao: Int, valor: Double) -> RequestBuilder<Response> {
        var path = "/v1/contas/{idConta}/cartoes/{idCartao}/creditar"
        path = path.stringByReplacingOccurrencesOfString("{idConta}", withString: "\(idConta)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{idCartao}", withString: "\(idCartao)", options: .LiteralSearch, range: nil)
        let URLString = SDCAPI.basePath + path
        
        let parameters = valor.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Response>.Type = SDCAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Desbloquear um cart\u00C3\u00A3o.
     
     - parameter idConta: (path) ID da Conta 
     - parameter idCartao: (path) Cart\u00C3\u00A3o a ser desbloqueado 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func desbloquearUsingPUT(idConta idConta: Int, idCartao: Int, completion: ((data: Response?, error: ErrorType?) -> Void)) {
        desbloquearUsingPUTWithRequestBuilder(idConta: idConta, idCartao: idCartao).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Desbloquear um cart\u00C3\u00A3o.
     
     - PUT /v1/contas/{idConta}/cartoes/{idCartao}/desbloquear
     - Desbloquear um determinado cart\u00C3\u00A3o.
     - API Key:
       - type: apiKey access_token 
       - name: access_token
     - examples: [{contentType=application/json, example={
  "msg" : "aeiou"
}}]
     
     - parameter idConta: (path) ID da Conta 
     - parameter idCartao: (path) Cart\u00C3\u00A3o a ser desbloqueado 

     - returns: RequestBuilder<Response> 
     */
    public class func desbloquearUsingPUTWithRequestBuilder(idConta idConta: Int, idCartao: Int) -> RequestBuilder<Response> {
        var path = "/v1/contas/{idConta}/cartoes/{idCartao}/desbloquear"
        path = path.stringByReplacingOccurrencesOfString("{idConta}", withString: "\(idConta)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{idCartao}", withString: "\(idCartao)", options: .LiteralSearch, range: nil)
        let URLString = SDCAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Response>.Type = SDCAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Retonar os extratos de transa\u00C3\u00A7oes do cart\u00C3\u00A3o
     
     - parameter idConta: (path) ID da Conta 
     - parameter idCartao: (path) ID do cart\u00C3\u00A3o 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func extratosUsingPOST(idConta idConta: Int, idCartao: Int, completion: ((data: [Transacao]?, error: ErrorType?) -> Void)) {
        extratosUsingPOSTWithRequestBuilder(idConta: idConta, idCartao: idCartao).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Retonar os extratos de transa\u00C3\u00A7oes do cart\u00C3\u00A3o
     
     - POST /v1/contas/{idConta}/cartoes/{idCartao}/extratos
     - Retorna os extratos de todas as transa\u00C3\u00A7oes de um determinado cart\u00C3\u00A3o
     - API Key:
       - type: apiKey access_token 
       - name: access_token
     - examples: [{contentType=application/json, example=[ {
  "msg" : "aeiou",
  "valor" : 1.3579000000000001069366817318950779736042022705078125,
  "id" : 123456789,
  "dataTransacao" : "2000-01-23T04:56:07.000+0000"
} ]}]
     
     - parameter idConta: (path) ID da Conta 
     - parameter idCartao: (path) ID do cart\u00C3\u00A3o 

     - returns: RequestBuilder<[Transacao]> 
     */
    public class func extratosUsingPOSTWithRequestBuilder(idConta idConta: Int, idCartao: Int) -> RequestBuilder<[Transacao]> {
        var path = "/v1/contas/{idConta}/cartoes/{idCartao}/extratos"
        path = path.stringByReplacingOccurrencesOfString("{idConta}", withString: "\(idConta)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{idCartao}", withString: "\(idCartao)", options: .LiteralSearch, range: nil)
        let URLString = SDCAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<[Transacao]>.Type = SDCAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Retona todos os cart\u00C3\u00A3o de uma conta
     
     - parameter idConta: (path) ID da Conta 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getAllUsingGET(idConta idConta: Int, completion: ((data: [Cartao]?, error: ErrorType?) -> Void)) {
        getAllUsingGETWithRequestBuilder(idConta: idConta).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Retona todos os cart\u00C3\u00A3o de uma conta
     
     - GET /v1/contas/{idConta}/cartoes
     - Consulte todos os carteos de uma determinada conta.
     - API Key:
       - type: apiKey access_token 
       - name: access_token
     - examples: [{contentType=application/json, example=[ {
  "senha" : "aeiou",
  "cvv" : "aeiou",
  "numero" : "aeiou",
  "nome" : "aeiou",
  "id" : 123456789,
  "status" : "aeiou"
} ]}]
     
     - parameter idConta: (path) ID da Conta 

     - returns: RequestBuilder<[Cartao]> 
     */
    public class func getAllUsingGETWithRequestBuilder(idConta idConta: Int) -> RequestBuilder<[Cartao]> {
        var path = "/v1/contas/{idConta}/cartoes"
        path = path.stringByReplacingOccurrencesOfString("{idConta}", withString: "\(idConta)", options: .LiteralSearch, range: nil)
        let URLString = SDCAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<[Cartao]>.Type = SDCAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Retorna um cart\u00C3\u00A3o
     
     - parameter idConta: (path) ID da Conta 
     - parameter idCartao: (path) ID do Cart\u00C3\u00A3o 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getOneUsingGET(idConta idConta: Int, idCartao: Int, completion: ((data: Cartao?, error: ErrorType?) -> Void)) {
        getOneUsingGETWithRequestBuilder(idConta: idConta, idCartao: idCartao).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Retorna um cart\u00C3\u00A3o
     
     - GET /v1/contas/{idConta}/cartoes/{idCartao}
     - Consulte um determinado cart\u00C3\u00A3o
     - API Key:
       - type: apiKey access_token 
       - name: access_token
     - examples: [{contentType=application/json, example={
  "senha" : "aeiou",
  "cvv" : "aeiou",
  "numero" : "aeiou",
  "nome" : "aeiou",
  "id" : 123456789,
  "status" : "aeiou"
}}]
     
     - parameter idConta: (path) ID da Conta 
     - parameter idCartao: (path) ID do Cart\u00C3\u00A3o 

     - returns: RequestBuilder<Cartao> 
     */
    public class func getOneUsingGETWithRequestBuilder(idConta idConta: Int, idCartao: Int) -> RequestBuilder<Cartao> {
        var path = "/v1/contas/{idConta}/cartoes/{idCartao}"
        path = path.stringByReplacingOccurrencesOfString("{idConta}", withString: "\(idConta)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{idCartao}", withString: "\(idCartao)", options: .LiteralSearch, range: nil)
        let URLString = SDCAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Cartao>.Type = SDCAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Retorna o limite do cart\u00C3\u00A3o
     
     - parameter idConta: (path) ID da Conta 
     - parameter idCartao: (path) ID do Cartao a ser creditado 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func limiteUsingGET(idConta idConta: Int, idCartao: Int, completion: ((data: Limite?, error: ErrorType?) -> Void)) {
        limiteUsingGETWithRequestBuilder(idConta: idConta, idCartao: idCartao).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Retorna o limite do cart\u00C3\u00A3o
     
     - GET /v1/contas/{idConta}/cartoes/{idCartao}/limite
     - Consultar o limite de um determinado cart\u00C3\u00A3o
     - API Key:
       - type: apiKey access_token 
       - name: access_token
     - examples: [{contentType=application/json, example={
  "msg" : "aeiou",
  "valor" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter idConta: (path) ID da Conta 
     - parameter idCartao: (path) ID do Cartao a ser creditado 

     - returns: RequestBuilder<Limite> 
     */
    public class func limiteUsingGETWithRequestBuilder(idConta idConta: Int, idCartao: Int) -> RequestBuilder<Limite> {
        var path = "/v1/contas/{idConta}/cartoes/{idCartao}/limite"
        path = path.stringByReplacingOccurrencesOfString("{idConta}", withString: "\(idConta)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{idCartao}", withString: "\(idCartao)", options: .LiteralSearch, range: nil)
        let URLString = SDCAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Limite>.Type = SDCAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Transacionar valores
     
     - parameter idConta: (path) ID da Conta 
     - parameter idCartao: (path) ID do Cartao a ser creditado 
     - parameter valor: (body) Valor da transa\u00C3\u00A7\u00C3\u00A3o 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func transacionarUsingPUT(idConta idConta: Int, idCartao: Int, valor: Double, completion: ((data: Response?, error: ErrorType?) -> Void)) {
        transacionarUsingPUTWithRequestBuilder(idConta: idConta, idCartao: idCartao, valor: valor).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Transacionar valores
     
     - PUT /v1/contas/{idConta}/cartoes/{idCartao}/transacionar
     - Transacionar algum valor utilizando um determinado cart\u00C3\u00A3o
     - API Key:
       - type: apiKey access_token 
       - name: access_token
     - examples: [{contentType=application/json, example={
  "msg" : "aeiou"
}}]
     
     - parameter idConta: (path) ID da Conta 
     - parameter idCartao: (path) ID do Cartao a ser creditado 
     - parameter valor: (body) Valor da transa\u00C3\u00A7\u00C3\u00A3o 

     - returns: RequestBuilder<Response> 
     */
    public class func transacionarUsingPUTWithRequestBuilder(idConta idConta: Int, idCartao: Int, valor: Double) -> RequestBuilder<Response> {
        var path = "/v1/contas/{idConta}/cartoes/{idCartao}/transacionar"
        path = path.stringByReplacingOccurrencesOfString("{idConta}", withString: "\(idConta)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{idCartao}", withString: "\(idCartao)", options: .LiteralSearch, range: nil)
        let URLString = SDCAPI.basePath + path
        
        let parameters = valor.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Response>.Type = SDCAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Transferir valores entre dois cart\u00C3\u00B5es distintos
     
     - parameter idConta: (path) ID da Conta do cart\u00C3\u00A3o de origem 
     - parameter idCartao: (path) ID do cart\u00C3\u00A3o de origem 
     - parameter idCartaoDestino: (query) ID do cart\u00C3\u00A3o de destino 
     - parameter valor: (body) Valor a ser transferido 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func transferirUsingPOST(idConta idConta: Int, idCartao: Int, idCartaoDestino: Int, valor: Double, completion: ((data: Response?, error: ErrorType?) -> Void)) {
        transferirUsingPOSTWithRequestBuilder(idConta: idConta, idCartao: idCartao, idCartaoDestino: idCartaoDestino, valor: valor).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Transferir valores entre dois cart\u00C3\u00B5es distintos
     
     - POST /v1/contas/{idConta}/cartoes/{idCartao}/transferir
     - Com esse m\u00C3\u00A9todo \u00C3\u00A9 permitido transferir qualquer valores entre dois cart\u00C3\u00B5es. Basta o cart\u00C3\u00A3o possuir limite e estar desbloqueado.
     - API Key:
       - type: apiKey access_token 
       - name: access_token
     - examples: [{contentType=application/json, example={
  "msg" : "aeiou"
}}]
     
     - parameter idConta: (path) ID da Conta do cart\u00C3\u00A3o de origem 
     - parameter idCartao: (path) ID do cart\u00C3\u00A3o de origem 
     - parameter idCartaoDestino: (query) ID do cart\u00C3\u00A3o de destino 
     - parameter valor: (body) Valor a ser transferido 

     - returns: RequestBuilder<Response> 
     */
    public class func transferirUsingPOSTWithRequestBuilder(idConta idConta: Int, idCartao: Int, idCartaoDestino: Int, valor: Double) -> RequestBuilder<Response> {
        var path = "/v1/contas/{idConta}/cartoes/{idCartao}/transferir"
        path = path.stringByReplacingOccurrencesOfString("{idConta}", withString: "\(idConta)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{idCartao}", withString: "\(idCartao)", options: .LiteralSearch, range: nil)
        let URLString = SDCAPI.basePath + path
        
        let parameters = valor.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Response>.Type = SDCAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Atualiza um cart\u00C3\u00A3o
     
     - parameter idConta: (path) ID da Conta 
     - parameter cartao: (body) Cart\u00C3\u00A3o a ser atualizado 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateUsingPUT(idConta idConta: Int, cartao: Cartao, completion: ((data: Cartao?, error: ErrorType?) -> Void)) {
        updateUsingPUTWithRequestBuilder(idConta: idConta, cartao: cartao).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Atualiza um cart\u00C3\u00A3o
     
     - PUT /v1/contas/{idConta}/cartoes
     - Atualiza um determinado cart\u00C3\u00A3o
     - API Key:
       - type: apiKey access_token 
       - name: access_token
     - examples: [{contentType=application/json, example={
  "senha" : "aeiou",
  "cvv" : "aeiou",
  "numero" : "aeiou",
  "nome" : "aeiou",
  "id" : 123456789,
  "status" : "aeiou"
}}]
     
     - parameter idConta: (path) ID da Conta 
     - parameter cartao: (body) Cart\u00C3\u00A3o a ser atualizado 

     - returns: RequestBuilder<Cartao> 
     */
    public class func updateUsingPUTWithRequestBuilder(idConta idConta: Int, cartao: Cartao) -> RequestBuilder<Cartao> {
        var path = "/v1/contas/{idConta}/cartoes"
        path = path.stringByReplacingOccurrencesOfString("{idConta}", withString: "\(idConta)", options: .LiteralSearch, range: nil)
        let URLString = SDCAPI.basePath + path
        
        let parameters = cartao.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Cartao>.Type = SDCAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

}
