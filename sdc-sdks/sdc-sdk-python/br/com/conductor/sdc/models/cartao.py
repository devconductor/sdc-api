# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Cartao(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Cartao - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'cvv': 'str',
            'id': 'int',
            'nome': 'str',
            'numero': 'str',
            'senha': 'str',
            'status': 'str'
        }

        self.attribute_map = {
            'cvv': 'cvv',
            'id': 'id',
            'nome': 'nome',
            'numero': 'numero',
            'senha': 'senha',
            'status': 'status'
        }

        self._cvv = None
        self._id = None
        self._nome = None
        self._numero = None
        self._senha = None
        self._status = None

    @property
    def cvv(self):
        """
        Gets the cvv of this Cartao.


        :return: The cvv of this Cartao.
        :rtype: str
        """
        return self._cvv

    @cvv.setter
    def cvv(self, cvv):
        """
        Sets the cvv of this Cartao.


        :param cvv: The cvv of this Cartao.
        :type: str
        """
        self._cvv = cvv

    @property
    def id(self):
        """
        Gets the id of this Cartao.


        :return: The id of this Cartao.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Cartao.


        :param id: The id of this Cartao.
        :type: int
        """
        self._id = id

    @property
    def nome(self):
        """
        Gets the nome of this Cartao.


        :return: The nome of this Cartao.
        :rtype: str
        """
        return self._nome

    @nome.setter
    def nome(self, nome):
        """
        Sets the nome of this Cartao.


        :param nome: The nome of this Cartao.
        :type: str
        """
        self._nome = nome

    @property
    def numero(self):
        """
        Gets the numero of this Cartao.


        :return: The numero of this Cartao.
        :rtype: str
        """
        return self._numero

    @numero.setter
    def numero(self, numero):
        """
        Sets the numero of this Cartao.


        :param numero: The numero of this Cartao.
        :type: str
        """
        self._numero = numero

    @property
    def senha(self):
        """
        Gets the senha of this Cartao.


        :return: The senha of this Cartao.
        :rtype: str
        """
        return self._senha

    @senha.setter
    def senha(self, senha):
        """
        Sets the senha of this Cartao.


        :param senha: The senha of this Cartao.
        :type: str
        """
        self._senha = senha

    @property
    def status(self):
        """
        Gets the status of this Cartao.


        :return: The status of this Cartao.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Cartao.


        :param status: The status of this Cartao.
        :type: str
        """
        allowed_values = ["ATIVO", "CANCELADO", "BLOQUEADO"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status`, must be one of {0}"
                .format(allowed_values)
            )
        self._status = status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

