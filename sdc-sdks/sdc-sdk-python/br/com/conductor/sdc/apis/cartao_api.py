# coding: utf-8

"""
CartaoApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class CartaoApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def bloquear_using_put(self, id_conta, id_cartao, **kwargs):
        """
        Bloquear um cart\u00C3\u00A3o.
        Bloquear um cart\u00C3\u00A3o.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.bloquear_using_put(id_conta, id_cartao, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id_conta: ID da Conta (required)
        :param int id_cartao: Cart\u00C3\u00A3o a ser bloqueado (required)
        :return: Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_conta', 'id_cartao']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bloquear_using_put" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id_conta' is set
        if ('id_conta' not in params) or (params['id_conta'] is None):
            raise ValueError("Missing the required parameter `id_conta` when calling `bloquear_using_put`")
        # verify the required parameter 'id_cartao' is set
        if ('id_cartao' not in params) or (params['id_cartao'] is None):
            raise ValueError("Missing the required parameter `id_cartao` when calling `bloquear_using_put`")

        resource_path = '/v1/contas/{idConta}/cartoes/{idCartao}/bloquear'.replace('{format}', 'json')
        path_params = {}
        if 'id_conta' in params:
            path_params['idConta'] = params['id_conta']
        if 'id_cartao' in params:
            path_params['idCartao'] = params['id_cartao']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['access_token']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Response',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def cancelar_using_delete(self, id_conta, id_cartao, **kwargs):
        """
        Cancelar um cart\u00C3\u00A3o
        Cancelar um determinado cart\u00C3\u00A3o

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cancelar_using_delete(id_conta, id_cartao, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id_conta: ID da Conta (required)
        :param int id_cartao: Cart\u00C3\u00A3o a ser cancelado (required)
        :return: Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_conta', 'id_cartao']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancelar_using_delete" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id_conta' is set
        if ('id_conta' not in params) or (params['id_conta'] is None):
            raise ValueError("Missing the required parameter `id_conta` when calling `cancelar_using_delete`")
        # verify the required parameter 'id_cartao' is set
        if ('id_cartao' not in params) or (params['id_cartao'] is None):
            raise ValueError("Missing the required parameter `id_cartao` when calling `cancelar_using_delete`")

        resource_path = '/v1/contas/{idConta}/cartoes/{idCartao}/cancelar'.replace('{format}', 'json')
        path_params = {}
        if 'id_conta' in params:
            path_params['idConta'] = params['id_conta']
        if 'id_cartao' in params:
            path_params['idCartao'] = params['id_cartao']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['access_token']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Response',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_using_post(self, id_conta, cartao, **kwargs):
        """
        Cria um cart\u00C3\u00A3o
        Voc\u00C3\u00AA pode criar um cart\u00C3\u00A3o ligado h\u00C3\u00A1 uma determinada conta.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_using_post(id_conta, cartao, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id_conta: ID da Conta (required)
        :param Cartao cartao: Cart\u00C3\u00A3o a ser criado (required)
        :return: Cartao
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_conta', 'cartao']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id_conta' is set
        if ('id_conta' not in params) or (params['id_conta'] is None):
            raise ValueError("Missing the required parameter `id_conta` when calling `create_using_post`")
        # verify the required parameter 'cartao' is set
        if ('cartao' not in params) or (params['cartao'] is None):
            raise ValueError("Missing the required parameter `cartao` when calling `create_using_post`")

        resource_path = '/v1/contas/{idConta}/cartoes'.replace('{format}', 'json')
        path_params = {}
        if 'id_conta' in params:
            path_params['idConta'] = params['id_conta']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'cartao' in params:
            body_params = params['cartao']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['access_token']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Cartao',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def creditar_using_put(self, id_conta, id_cartao, valor, **kwargs):
        """
        Creditar dinheiro em um cart\u00C3\u00A3o
        Com esse m\u00C3\u00A9todo \u00C3\u00A9 possivel creditar qualquer valor em um cart\u00C3\u00A3o.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.creditar_using_put(id_conta, id_cartao, valor, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id_conta: ID da Conta (required)
        :param int id_cartao: ID do Cartao a ser creditado (required)
        :param float valor: Valor a ser creditado (required)
        :return: Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_conta', 'id_cartao', 'valor']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method creditar_using_put" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id_conta' is set
        if ('id_conta' not in params) or (params['id_conta'] is None):
            raise ValueError("Missing the required parameter `id_conta` when calling `creditar_using_put`")
        # verify the required parameter 'id_cartao' is set
        if ('id_cartao' not in params) or (params['id_cartao'] is None):
            raise ValueError("Missing the required parameter `id_cartao` when calling `creditar_using_put`")
        # verify the required parameter 'valor' is set
        if ('valor' not in params) or (params['valor'] is None):
            raise ValueError("Missing the required parameter `valor` when calling `creditar_using_put`")

        resource_path = '/v1/contas/{idConta}/cartoes/{idCartao}/creditar'.replace('{format}', 'json')
        path_params = {}
        if 'id_conta' in params:
            path_params['idConta'] = params['id_conta']
        if 'id_cartao' in params:
            path_params['idCartao'] = params['id_cartao']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'valor' in params:
            body_params = params['valor']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['access_token']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Response',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def desbloquear_using_put(self, id_conta, id_cartao, **kwargs):
        """
        Desbloquear um cart\u00C3\u00A3o.
        Desbloquear um determinado cart\u00C3\u00A3o.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.desbloquear_using_put(id_conta, id_cartao, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id_conta: ID da Conta (required)
        :param int id_cartao: Cart\u00C3\u00A3o a ser desbloqueado (required)
        :return: Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_conta', 'id_cartao']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method desbloquear_using_put" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id_conta' is set
        if ('id_conta' not in params) or (params['id_conta'] is None):
            raise ValueError("Missing the required parameter `id_conta` when calling `desbloquear_using_put`")
        # verify the required parameter 'id_cartao' is set
        if ('id_cartao' not in params) or (params['id_cartao'] is None):
            raise ValueError("Missing the required parameter `id_cartao` when calling `desbloquear_using_put`")

        resource_path = '/v1/contas/{idConta}/cartoes/{idCartao}/desbloquear'.replace('{format}', 'json')
        path_params = {}
        if 'id_conta' in params:
            path_params['idConta'] = params['id_conta']
        if 'id_cartao' in params:
            path_params['idCartao'] = params['id_cartao']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['access_token']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Response',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def extratos_using_post(self, id_conta, id_cartao, **kwargs):
        """
        Retonar os extratos de transa\u00C3\u00A7oes do cart\u00C3\u00A3o
        Retorna os extratos de todas as transa\u00C3\u00A7oes de um determinado cart\u00C3\u00A3o

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.extratos_using_post(id_conta, id_cartao, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id_conta: ID da Conta (required)
        :param int id_cartao: ID do cart\u00C3\u00A3o (required)
        :return: list[Transacao]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_conta', 'id_cartao']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method extratos_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id_conta' is set
        if ('id_conta' not in params) or (params['id_conta'] is None):
            raise ValueError("Missing the required parameter `id_conta` when calling `extratos_using_post`")
        # verify the required parameter 'id_cartao' is set
        if ('id_cartao' not in params) or (params['id_cartao'] is None):
            raise ValueError("Missing the required parameter `id_cartao` when calling `extratos_using_post`")

        resource_path = '/v1/contas/{idConta}/cartoes/{idCartao}/extratos'.replace('{format}', 'json')
        path_params = {}
        if 'id_conta' in params:
            path_params['idConta'] = params['id_conta']
        if 'id_cartao' in params:
            path_params['idCartao'] = params['id_cartao']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['access_token']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[Transacao]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_all_using_get(self, id_conta, **kwargs):
        """
        Retona todos os cart\u00C3\u00A3o de uma conta
        Consulte todos os carteos de uma determinada conta.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_using_get(id_conta, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id_conta: ID da Conta (required)
        :return: list[Cartao]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_conta']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id_conta' is set
        if ('id_conta' not in params) or (params['id_conta'] is None):
            raise ValueError("Missing the required parameter `id_conta` when calling `get_all_using_get`")

        resource_path = '/v1/contas/{idConta}/cartoes'.replace('{format}', 'json')
        path_params = {}
        if 'id_conta' in params:
            path_params['idConta'] = params['id_conta']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['access_token']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[Cartao]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_one_using_get(self, id_conta, id_cartao, **kwargs):
        """
        Retorna um cart\u00C3\u00A3o
        Consulte um determinado cart\u00C3\u00A3o

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_one_using_get(id_conta, id_cartao, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id_conta: ID da Conta (required)
        :param int id_cartao: ID do Cart\u00C3\u00A3o (required)
        :return: Cartao
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_conta', 'id_cartao']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_one_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id_conta' is set
        if ('id_conta' not in params) or (params['id_conta'] is None):
            raise ValueError("Missing the required parameter `id_conta` when calling `get_one_using_get`")
        # verify the required parameter 'id_cartao' is set
        if ('id_cartao' not in params) or (params['id_cartao'] is None):
            raise ValueError("Missing the required parameter `id_cartao` when calling `get_one_using_get`")

        resource_path = '/v1/contas/{idConta}/cartoes/{idCartao}'.replace('{format}', 'json')
        path_params = {}
        if 'id_conta' in params:
            path_params['idConta'] = params['id_conta']
        if 'id_cartao' in params:
            path_params['idCartao'] = params['id_cartao']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['access_token']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Cartao',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def limite_using_get(self, id_conta, id_cartao, **kwargs):
        """
        Retorna o limite do cart\u00C3\u00A3o
        Consultar o limite de um determinado cart\u00C3\u00A3o

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.limite_using_get(id_conta, id_cartao, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id_conta: ID da Conta (required)
        :param int id_cartao: ID do Cartao a ser creditado (required)
        :return: Limite
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_conta', 'id_cartao']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method limite_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id_conta' is set
        if ('id_conta' not in params) or (params['id_conta'] is None):
            raise ValueError("Missing the required parameter `id_conta` when calling `limite_using_get`")
        # verify the required parameter 'id_cartao' is set
        if ('id_cartao' not in params) or (params['id_cartao'] is None):
            raise ValueError("Missing the required parameter `id_cartao` when calling `limite_using_get`")

        resource_path = '/v1/contas/{idConta}/cartoes/{idCartao}/limite'.replace('{format}', 'json')
        path_params = {}
        if 'id_conta' in params:
            path_params['idConta'] = params['id_conta']
        if 'id_cartao' in params:
            path_params['idCartao'] = params['id_cartao']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['access_token']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Limite',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def transacionar_using_put(self, id_conta, id_cartao, valor, **kwargs):
        """
        Transacionar valores
        Transacionar algum valor utilizando um determinado cart\u00C3\u00A3o

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.transacionar_using_put(id_conta, id_cartao, valor, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id_conta: ID da Conta (required)
        :param int id_cartao: ID do Cartao a ser creditado (required)
        :param float valor: Valor da transa\u00C3\u00A7\u00C3\u00A3o (required)
        :return: Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_conta', 'id_cartao', 'valor']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transacionar_using_put" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id_conta' is set
        if ('id_conta' not in params) or (params['id_conta'] is None):
            raise ValueError("Missing the required parameter `id_conta` when calling `transacionar_using_put`")
        # verify the required parameter 'id_cartao' is set
        if ('id_cartao' not in params) or (params['id_cartao'] is None):
            raise ValueError("Missing the required parameter `id_cartao` when calling `transacionar_using_put`")
        # verify the required parameter 'valor' is set
        if ('valor' not in params) or (params['valor'] is None):
            raise ValueError("Missing the required parameter `valor` when calling `transacionar_using_put`")

        resource_path = '/v1/contas/{idConta}/cartoes/{idCartao}/transacionar'.replace('{format}', 'json')
        path_params = {}
        if 'id_conta' in params:
            path_params['idConta'] = params['id_conta']
        if 'id_cartao' in params:
            path_params['idCartao'] = params['id_cartao']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'valor' in params:
            body_params = params['valor']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['access_token']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Response',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def transferir_using_post(self, id_conta, id_cartao, id_cartao_destino, valor, **kwargs):
        """
        Transferir valores entre dois cart\u00C3\u00B5es distintos
        Com esse m\u00C3\u00A9todo \u00C3\u00A9 permitido transferir qualquer valores entre dois cart\u00C3\u00B5es. Basta o cart\u00C3\u00A3o possuir limite e estar desbloqueado.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.transferir_using_post(id_conta, id_cartao, id_cartao_destino, valor, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id_conta: ID da Conta do cart\u00C3\u00A3o de origem (required)
        :param int id_cartao: ID do cart\u00C3\u00A3o de origem (required)
        :param int id_cartao_destino: ID do cart\u00C3\u00A3o de destino (required)
        :param float valor: Valor a ser transferido (required)
        :return: Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_conta', 'id_cartao', 'id_cartao_destino', 'valor']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transferir_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id_conta' is set
        if ('id_conta' not in params) or (params['id_conta'] is None):
            raise ValueError("Missing the required parameter `id_conta` when calling `transferir_using_post`")
        # verify the required parameter 'id_cartao' is set
        if ('id_cartao' not in params) or (params['id_cartao'] is None):
            raise ValueError("Missing the required parameter `id_cartao` when calling `transferir_using_post`")
        # verify the required parameter 'id_cartao_destino' is set
        if ('id_cartao_destino' not in params) or (params['id_cartao_destino'] is None):
            raise ValueError("Missing the required parameter `id_cartao_destino` when calling `transferir_using_post`")
        # verify the required parameter 'valor' is set
        if ('valor' not in params) or (params['valor'] is None):
            raise ValueError("Missing the required parameter `valor` when calling `transferir_using_post`")

        resource_path = '/v1/contas/{idConta}/cartoes/{idCartao}/transferir'.replace('{format}', 'json')
        path_params = {}
        if 'id_conta' in params:
            path_params['idConta'] = params['id_conta']
        if 'id_cartao' in params:
            path_params['idCartao'] = params['id_cartao']

        query_params = {}
        if 'id_cartao_destino' in params:
            query_params['idCartaoDestino'] = params['id_cartao_destino']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'valor' in params:
            body_params = params['valor']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['access_token']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Response',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_using_put(self, id_conta, cartao, **kwargs):
        """
        Atualiza um cart\u00C3\u00A3o
        Atualiza um determinado cart\u00C3\u00A3o

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_using_put(id_conta, cartao, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id_conta: ID da Conta (required)
        :param Cartao cartao: Cart\u00C3\u00A3o a ser atualizado (required)
        :return: Cartao
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_conta', 'cartao']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_using_put" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id_conta' is set
        if ('id_conta' not in params) or (params['id_conta'] is None):
            raise ValueError("Missing the required parameter `id_conta` when calling `update_using_put`")
        # verify the required parameter 'cartao' is set
        if ('cartao' not in params) or (params['cartao'] is None):
            raise ValueError("Missing the required parameter `cartao` when calling `update_using_put`")

        resource_path = '/v1/contas/{idConta}/cartoes'.replace('{format}', 'json')
        path_params = {}
        if 'id_conta' in params:
            path_params['idConta'] = params['id_conta']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'cartao' in params:
            body_params = params['cartao']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['access_token']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Cartao',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
