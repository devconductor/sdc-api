<?php
/**
 * CartaoApi
 * PHP version 5
 *
 * @category Class
 * @package  br.com.conductor.sdc.api.v1.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace br.com.conductor.sdc.api.v1;

use \br.com.conductor.sdc.api.v1.invoker\Configuration;
use \br.com.conductor.sdc.api.v1.invoker\ApiClient;
use \br.com.conductor.sdc.api.v1.invoker\ApiException;
use \br.com.conductor.sdc.api.v1.invoker\ObjectSerializer;

/**
 * CartaoApi Class Doc Comment
 *
 * @category Class
 * @package  br.com.conductor.sdc.api.v1.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CartaoApi
{

    /**
     * API Client
     * @var \br.com.conductor.sdc.api.v1.invoker\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \br.com.conductor.sdc.api.v1.invoker\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://localhost/');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \br.com.conductor.sdc.api.v1.invoker\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \br.com.conductor.sdc.api.v1.invoker\ApiClient $apiClient set the API client
     * @return CartaoApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * bloquearUsingPUT
     *
     * Bloquear um cart\u00C3\u00A3o.
     *
     * @param int $id_conta ID da Conta (required)
     * @param int $id_cartao Cart\u00C3\u00A3o a ser bloqueado (required)
     * @return \br.com.conductor.sdc.api.v1.model\Response
     * @throws \br.com.conductor.sdc.api.v1.invoker\ApiException on non-2xx response
     */
    public function bloquearUsingPUT($id_conta, $id_cartao)
    {
        list($response, $statusCode, $httpHeader) = $this->bloquearUsingPUTWithHttpInfo ($id_conta, $id_cartao);
        return $response; 
    }


    /**
     * bloquearUsingPUTWithHttpInfo
     *
     * Bloquear um cart\u00C3\u00A3o.
     *
     * @param int $id_conta ID da Conta (required)
     * @param int $id_cartao Cart\u00C3\u00A3o a ser bloqueado (required)
     * @return Array of \br.com.conductor.sdc.api.v1.model\Response, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.sdc.api.v1.invoker\ApiException on non-2xx response
     */
    public function bloquearUsingPUTWithHttpInfo($id_conta, $id_cartao)
    {
        
        // verify the required parameter 'id_conta' is set
        if ($id_conta === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_conta when calling bloquearUsingPUT');
        }
        // verify the required parameter 'id_cartao' is set
        if ($id_cartao === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_cartao when calling bloquearUsingPUT');
        }
  
        // parse inputs
        $resourcePath = "/v1/contas/{idConta}/cartoes/{idCartao}/bloquear";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id_conta !== null) {
            $resourcePath = str_replace(
                "{" . "idConta" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_conta),
                $resourcePath
            );
        }// path params
        
        if ($id_cartao !== null) {
            $resourcePath = str_replace(
                "{" . "idCartao" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_cartao),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $headerParams['access_token'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.sdc.api.v1.model\Response'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.sdc.api.v1.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.sdc.api.v1.model\Response', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.sdc.api.v1.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.sdc.api.v1.model\Response', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * cancelarUsingDELETE
     *
     * Cancelar um cart\u00C3\u00A3o
     *
     * @param int $id_conta ID da Conta (required)
     * @param int $id_cartao Cart\u00C3\u00A3o a ser cancelado (required)
     * @return \br.com.conductor.sdc.api.v1.model\Response
     * @throws \br.com.conductor.sdc.api.v1.invoker\ApiException on non-2xx response
     */
    public function cancelarUsingDELETE($id_conta, $id_cartao)
    {
        list($response, $statusCode, $httpHeader) = $this->cancelarUsingDELETEWithHttpInfo ($id_conta, $id_cartao);
        return $response; 
    }


    /**
     * cancelarUsingDELETEWithHttpInfo
     *
     * Cancelar um cart\u00C3\u00A3o
     *
     * @param int $id_conta ID da Conta (required)
     * @param int $id_cartao Cart\u00C3\u00A3o a ser cancelado (required)
     * @return Array of \br.com.conductor.sdc.api.v1.model\Response, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.sdc.api.v1.invoker\ApiException on non-2xx response
     */
    public function cancelarUsingDELETEWithHttpInfo($id_conta, $id_cartao)
    {
        
        // verify the required parameter 'id_conta' is set
        if ($id_conta === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_conta when calling cancelarUsingDELETE');
        }
        // verify the required parameter 'id_cartao' is set
        if ($id_cartao === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_cartao when calling cancelarUsingDELETE');
        }
  
        // parse inputs
        $resourcePath = "/v1/contas/{idConta}/cartoes/{idCartao}/cancelar";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id_conta !== null) {
            $resourcePath = str_replace(
                "{" . "idConta" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_conta),
                $resourcePath
            );
        }// path params
        
        if ($id_cartao !== null) {
            $resourcePath = str_replace(
                "{" . "idCartao" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_cartao),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $headerParams['access_token'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.sdc.api.v1.model\Response'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.sdc.api.v1.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.sdc.api.v1.model\Response', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.sdc.api.v1.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.sdc.api.v1.model\Response', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * createUsingPOST
     *
     * Cria um cart\u00C3\u00A3o
     *
     * @param int $id_conta ID da Conta (required)
     * @param \br.com.conductor.sdc.api.v1.model\Cartao $cartao Cart\u00C3\u00A3o a ser criado (required)
     * @return \br.com.conductor.sdc.api.v1.model\Cartao
     * @throws \br.com.conductor.sdc.api.v1.invoker\ApiException on non-2xx response
     */
    public function createUsingPOST($id_conta, $cartao)
    {
        list($response, $statusCode, $httpHeader) = $this->createUsingPOSTWithHttpInfo ($id_conta, $cartao);
        return $response; 
    }


    /**
     * createUsingPOSTWithHttpInfo
     *
     * Cria um cart\u00C3\u00A3o
     *
     * @param int $id_conta ID da Conta (required)
     * @param \br.com.conductor.sdc.api.v1.model\Cartao $cartao Cart\u00C3\u00A3o a ser criado (required)
     * @return Array of \br.com.conductor.sdc.api.v1.model\Cartao, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.sdc.api.v1.invoker\ApiException on non-2xx response
     */
    public function createUsingPOSTWithHttpInfo($id_conta, $cartao)
    {
        
        // verify the required parameter 'id_conta' is set
        if ($id_conta === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_conta when calling createUsingPOST');
        }
        // verify the required parameter 'cartao' is set
        if ($cartao === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cartao when calling createUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/v1/contas/{idConta}/cartoes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id_conta !== null) {
            $resourcePath = str_replace(
                "{" . "idConta" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_conta),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($cartao)) {
            $_tempBody = $cartao;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $headerParams['access_token'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.sdc.api.v1.model\Cartao'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.sdc.api.v1.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.sdc.api.v1.model\Cartao', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.sdc.api.v1.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.sdc.api.v1.model\Cartao', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * creditarUsingPUT
     *
     * Creditar dinheiro em um cart\u00C3\u00A3o
     *
     * @param int $id_conta ID da Conta (required)
     * @param int $id_cartao ID do Cartao a ser creditado (required)
     * @param double $valor Valor a ser creditado (required)
     * @return \br.com.conductor.sdc.api.v1.model\Response
     * @throws \br.com.conductor.sdc.api.v1.invoker\ApiException on non-2xx response
     */
    public function creditarUsingPUT($id_conta, $id_cartao, $valor)
    {
        list($response, $statusCode, $httpHeader) = $this->creditarUsingPUTWithHttpInfo ($id_conta, $id_cartao, $valor);
        return $response; 
    }


    /**
     * creditarUsingPUTWithHttpInfo
     *
     * Creditar dinheiro em um cart\u00C3\u00A3o
     *
     * @param int $id_conta ID da Conta (required)
     * @param int $id_cartao ID do Cartao a ser creditado (required)
     * @param double $valor Valor a ser creditado (required)
     * @return Array of \br.com.conductor.sdc.api.v1.model\Response, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.sdc.api.v1.invoker\ApiException on non-2xx response
     */
    public function creditarUsingPUTWithHttpInfo($id_conta, $id_cartao, $valor)
    {
        
        // verify the required parameter 'id_conta' is set
        if ($id_conta === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_conta when calling creditarUsingPUT');
        }
        // verify the required parameter 'id_cartao' is set
        if ($id_cartao === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_cartao when calling creditarUsingPUT');
        }
        // verify the required parameter 'valor' is set
        if ($valor === null) {
            throw new \InvalidArgumentException('Missing the required parameter $valor when calling creditarUsingPUT');
        }
  
        // parse inputs
        $resourcePath = "/v1/contas/{idConta}/cartoes/{idCartao}/creditar";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id_conta !== null) {
            $resourcePath = str_replace(
                "{" . "idConta" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_conta),
                $resourcePath
            );
        }// path params
        
        if ($id_cartao !== null) {
            $resourcePath = str_replace(
                "{" . "idCartao" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_cartao),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($valor)) {
            $_tempBody = $valor;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $headerParams['access_token'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.sdc.api.v1.model\Response'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.sdc.api.v1.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.sdc.api.v1.model\Response', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.sdc.api.v1.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.sdc.api.v1.model\Response', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * desbloquearUsingPUT
     *
     * Desbloquear um cart\u00C3\u00A3o.
     *
     * @param int $id_conta ID da Conta (required)
     * @param int $id_cartao Cart\u00C3\u00A3o a ser desbloqueado (required)
     * @return \br.com.conductor.sdc.api.v1.model\Response
     * @throws \br.com.conductor.sdc.api.v1.invoker\ApiException on non-2xx response
     */
    public function desbloquearUsingPUT($id_conta, $id_cartao)
    {
        list($response, $statusCode, $httpHeader) = $this->desbloquearUsingPUTWithHttpInfo ($id_conta, $id_cartao);
        return $response; 
    }


    /**
     * desbloquearUsingPUTWithHttpInfo
     *
     * Desbloquear um cart\u00C3\u00A3o.
     *
     * @param int $id_conta ID da Conta (required)
     * @param int $id_cartao Cart\u00C3\u00A3o a ser desbloqueado (required)
     * @return Array of \br.com.conductor.sdc.api.v1.model\Response, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.sdc.api.v1.invoker\ApiException on non-2xx response
     */
    public function desbloquearUsingPUTWithHttpInfo($id_conta, $id_cartao)
    {
        
        // verify the required parameter 'id_conta' is set
        if ($id_conta === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_conta when calling desbloquearUsingPUT');
        }
        // verify the required parameter 'id_cartao' is set
        if ($id_cartao === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_cartao when calling desbloquearUsingPUT');
        }
  
        // parse inputs
        $resourcePath = "/v1/contas/{idConta}/cartoes/{idCartao}/desbloquear";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id_conta !== null) {
            $resourcePath = str_replace(
                "{" . "idConta" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_conta),
                $resourcePath
            );
        }// path params
        
        if ($id_cartao !== null) {
            $resourcePath = str_replace(
                "{" . "idCartao" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_cartao),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $headerParams['access_token'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.sdc.api.v1.model\Response'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.sdc.api.v1.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.sdc.api.v1.model\Response', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.sdc.api.v1.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.sdc.api.v1.model\Response', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * extratosUsingPOST
     *
     * Retonar os extratos de transa\u00C3\u00A7oes do cart\u00C3\u00A3o
     *
     * @param int $id_conta ID da Conta (required)
     * @param int $id_cartao ID do cart\u00C3\u00A3o (required)
     * @return \br.com.conductor.sdc.api.v1.model\Response
     * @throws \br.com.conductor.sdc.api.v1.invoker\ApiException on non-2xx response
     */
    public function extratosUsingPOST($id_conta, $id_cartao)
    {
        list($response, $statusCode, $httpHeader) = $this->extratosUsingPOSTWithHttpInfo ($id_conta, $id_cartao);
        return $response; 
    }


    /**
     * extratosUsingPOSTWithHttpInfo
     *
     * Retonar os extratos de transa\u00C3\u00A7oes do cart\u00C3\u00A3o
     *
     * @param int $id_conta ID da Conta (required)
     * @param int $id_cartao ID do cart\u00C3\u00A3o (required)
     * @return Array of \br.com.conductor.sdc.api.v1.model\Response, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.sdc.api.v1.invoker\ApiException on non-2xx response
     */
    public function extratosUsingPOSTWithHttpInfo($id_conta, $id_cartao)
    {
        
        // verify the required parameter 'id_conta' is set
        if ($id_conta === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_conta when calling extratosUsingPOST');
        }
        // verify the required parameter 'id_cartao' is set
        if ($id_cartao === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_cartao when calling extratosUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/v1/contas/{idConta}/cartoes/{idCartao}/extratos";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id_conta !== null) {
            $resourcePath = str_replace(
                "{" . "idConta" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_conta),
                $resourcePath
            );
        }// path params
        
        if ($id_cartao !== null) {
            $resourcePath = str_replace(
                "{" . "idCartao" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_cartao),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $headerParams['access_token'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.sdc.api.v1.model\Response'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.sdc.api.v1.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.sdc.api.v1.model\Response', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.sdc.api.v1.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.sdc.api.v1.model\Response', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getAllUsingGET
     *
     * Retona todos os cart\u00C3\u00A3o de uma conta
     *
     * @param int $id_conta ID da Conta (required)
     * @return \br.com.conductor.sdc.api.v1.model\Cartao[]
     * @throws \br.com.conductor.sdc.api.v1.invoker\ApiException on non-2xx response
     */
    public function getAllUsingGET($id_conta)
    {
        list($response, $statusCode, $httpHeader) = $this->getAllUsingGETWithHttpInfo ($id_conta);
        return $response; 
    }


    /**
     * getAllUsingGETWithHttpInfo
     *
     * Retona todos os cart\u00C3\u00A3o de uma conta
     *
     * @param int $id_conta ID da Conta (required)
     * @return Array of \br.com.conductor.sdc.api.v1.model\Cartao[], HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.sdc.api.v1.invoker\ApiException on non-2xx response
     */
    public function getAllUsingGETWithHttpInfo($id_conta)
    {
        
        // verify the required parameter 'id_conta' is set
        if ($id_conta === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_conta when calling getAllUsingGET');
        }
  
        // parse inputs
        $resourcePath = "/v1/contas/{idConta}/cartoes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id_conta !== null) {
            $resourcePath = str_replace(
                "{" . "idConta" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_conta),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $headerParams['access_token'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.sdc.api.v1.model\Cartao[]'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.sdc.api.v1.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.sdc.api.v1.model\Cartao[]', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.sdc.api.v1.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.sdc.api.v1.model\Cartao[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getOneUsingGET
     *
     * Retorna um cart\u00C3\u00A3o
     *
     * @param int $id_conta ID da Conta (required)
     * @param int $id_cartao ID do Cart\u00C3\u00A3o (required)
     * @return \br.com.conductor.sdc.api.v1.model\Cartao
     * @throws \br.com.conductor.sdc.api.v1.invoker\ApiException on non-2xx response
     */
    public function getOneUsingGET($id_conta, $id_cartao)
    {
        list($response, $statusCode, $httpHeader) = $this->getOneUsingGETWithHttpInfo ($id_conta, $id_cartao);
        return $response; 
    }


    /**
     * getOneUsingGETWithHttpInfo
     *
     * Retorna um cart\u00C3\u00A3o
     *
     * @param int $id_conta ID da Conta (required)
     * @param int $id_cartao ID do Cart\u00C3\u00A3o (required)
     * @return Array of \br.com.conductor.sdc.api.v1.model\Cartao, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.sdc.api.v1.invoker\ApiException on non-2xx response
     */
    public function getOneUsingGETWithHttpInfo($id_conta, $id_cartao)
    {
        
        // verify the required parameter 'id_conta' is set
        if ($id_conta === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_conta when calling getOneUsingGET');
        }
        // verify the required parameter 'id_cartao' is set
        if ($id_cartao === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_cartao when calling getOneUsingGET');
        }
  
        // parse inputs
        $resourcePath = "/v1/contas/{idConta}/cartoes/{idCartao}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id_conta !== null) {
            $resourcePath = str_replace(
                "{" . "idConta" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_conta),
                $resourcePath
            );
        }// path params
        
        if ($id_cartao !== null) {
            $resourcePath = str_replace(
                "{" . "idCartao" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_cartao),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $headerParams['access_token'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.sdc.api.v1.model\Cartao'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.sdc.api.v1.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.sdc.api.v1.model\Cartao', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.sdc.api.v1.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.sdc.api.v1.model\Cartao', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * limiteUsingGET
     *
     * Retorna o limite do cart\u00C3\u00A3o
     *
     * @param int $id_conta ID da Conta (required)
     * @param int $id_cartao ID do Cartao a ser creditado (required)
     * @return \br.com.conductor.sdc.api.v1.model\Limite
     * @throws \br.com.conductor.sdc.api.v1.invoker\ApiException on non-2xx response
     */
    public function limiteUsingGET($id_conta, $id_cartao)
    {
        list($response, $statusCode, $httpHeader) = $this->limiteUsingGETWithHttpInfo ($id_conta, $id_cartao);
        return $response; 
    }


    /**
     * limiteUsingGETWithHttpInfo
     *
     * Retorna o limite do cart\u00C3\u00A3o
     *
     * @param int $id_conta ID da Conta (required)
     * @param int $id_cartao ID do Cartao a ser creditado (required)
     * @return Array of \br.com.conductor.sdc.api.v1.model\Limite, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.sdc.api.v1.invoker\ApiException on non-2xx response
     */
    public function limiteUsingGETWithHttpInfo($id_conta, $id_cartao)
    {
        
        // verify the required parameter 'id_conta' is set
        if ($id_conta === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_conta when calling limiteUsingGET');
        }
        // verify the required parameter 'id_cartao' is set
        if ($id_cartao === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_cartao when calling limiteUsingGET');
        }
  
        // parse inputs
        $resourcePath = "/v1/contas/{idConta}/cartoes/{idCartao}/limite";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id_conta !== null) {
            $resourcePath = str_replace(
                "{" . "idConta" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_conta),
                $resourcePath
            );
        }// path params
        
        if ($id_cartao !== null) {
            $resourcePath = str_replace(
                "{" . "idCartao" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_cartao),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $headerParams['access_token'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.sdc.api.v1.model\Limite'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.sdc.api.v1.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.sdc.api.v1.model\Limite', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.sdc.api.v1.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.sdc.api.v1.model\Limite', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * transacionarUsingPUT
     *
     * Transacionar valores
     *
     * @param int $id_conta ID da Conta (required)
     * @param int $id_cartao ID do Cartao a ser creditado (required)
     * @param double $valor Valor da transa\u00C3\u00A7\u00C3\u00A3o (required)
     * @return \br.com.conductor.sdc.api.v1.model\Response
     * @throws \br.com.conductor.sdc.api.v1.invoker\ApiException on non-2xx response
     */
    public function transacionarUsingPUT($id_conta, $id_cartao, $valor)
    {
        list($response, $statusCode, $httpHeader) = $this->transacionarUsingPUTWithHttpInfo ($id_conta, $id_cartao, $valor);
        return $response; 
    }


    /**
     * transacionarUsingPUTWithHttpInfo
     *
     * Transacionar valores
     *
     * @param int $id_conta ID da Conta (required)
     * @param int $id_cartao ID do Cartao a ser creditado (required)
     * @param double $valor Valor da transa\u00C3\u00A7\u00C3\u00A3o (required)
     * @return Array of \br.com.conductor.sdc.api.v1.model\Response, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.sdc.api.v1.invoker\ApiException on non-2xx response
     */
    public function transacionarUsingPUTWithHttpInfo($id_conta, $id_cartao, $valor)
    {
        
        // verify the required parameter 'id_conta' is set
        if ($id_conta === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_conta when calling transacionarUsingPUT');
        }
        // verify the required parameter 'id_cartao' is set
        if ($id_cartao === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_cartao when calling transacionarUsingPUT');
        }
        // verify the required parameter 'valor' is set
        if ($valor === null) {
            throw new \InvalidArgumentException('Missing the required parameter $valor when calling transacionarUsingPUT');
        }
  
        // parse inputs
        $resourcePath = "/v1/contas/{idConta}/cartoes/{idCartao}/transacionar";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id_conta !== null) {
            $resourcePath = str_replace(
                "{" . "idConta" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_conta),
                $resourcePath
            );
        }// path params
        
        if ($id_cartao !== null) {
            $resourcePath = str_replace(
                "{" . "idCartao" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_cartao),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($valor)) {
            $_tempBody = $valor;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $headerParams['access_token'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.sdc.api.v1.model\Response'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.sdc.api.v1.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.sdc.api.v1.model\Response', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.sdc.api.v1.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.sdc.api.v1.model\Response', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * transferirUsingPOST
     *
     * Transferir valores entre dois cart\u00C3\u00B5es distintos
     *
     * @param int $id_conta ID da Conta do cart\u00C3\u00A3o de origem (required)
     * @param int $id_cartao ID do cart\u00C3\u00A3o de origem (required)
     * @param int $id_cartao_destino ID do cart\u00C3\u00A3o de destino (required)
     * @param double $valor Valor a ser transferido (required)
     * @return \br.com.conductor.sdc.api.v1.model\Response
     * @throws \br.com.conductor.sdc.api.v1.invoker\ApiException on non-2xx response
     */
    public function transferirUsingPOST($id_conta, $id_cartao, $id_cartao_destino, $valor)
    {
        list($response, $statusCode, $httpHeader) = $this->transferirUsingPOSTWithHttpInfo ($id_conta, $id_cartao, $id_cartao_destino, $valor);
        return $response; 
    }


    /**
     * transferirUsingPOSTWithHttpInfo
     *
     * Transferir valores entre dois cart\u00C3\u00B5es distintos
     *
     * @param int $id_conta ID da Conta do cart\u00C3\u00A3o de origem (required)
     * @param int $id_cartao ID do cart\u00C3\u00A3o de origem (required)
     * @param int $id_cartao_destino ID do cart\u00C3\u00A3o de destino (required)
     * @param double $valor Valor a ser transferido (required)
     * @return Array of \br.com.conductor.sdc.api.v1.model\Response, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.sdc.api.v1.invoker\ApiException on non-2xx response
     */
    public function transferirUsingPOSTWithHttpInfo($id_conta, $id_cartao, $id_cartao_destino, $valor)
    {
        
        // verify the required parameter 'id_conta' is set
        if ($id_conta === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_conta when calling transferirUsingPOST');
        }
        // verify the required parameter 'id_cartao' is set
        if ($id_cartao === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_cartao when calling transferirUsingPOST');
        }
        // verify the required parameter 'id_cartao_destino' is set
        if ($id_cartao_destino === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_cartao_destino when calling transferirUsingPOST');
        }
        // verify the required parameter 'valor' is set
        if ($valor === null) {
            throw new \InvalidArgumentException('Missing the required parameter $valor when calling transferirUsingPOST');
        }
  
        // parse inputs
        $resourcePath = "/v1/contas/{idConta}/cartoes/{idCartao}/transferir";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($id_cartao_destino !== null) {
            $queryParams['idCartaoDestino'] = $this->apiClient->getSerializer()->toQueryValue($id_cartao_destino);
        }
        
        // path params
        
        if ($id_conta !== null) {
            $resourcePath = str_replace(
                "{" . "idConta" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_conta),
                $resourcePath
            );
        }// path params
        
        if ($id_cartao !== null) {
            $resourcePath = str_replace(
                "{" . "idCartao" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_cartao),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($valor)) {
            $_tempBody = $valor;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $headerParams['access_token'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.sdc.api.v1.model\Response'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.sdc.api.v1.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.sdc.api.v1.model\Response', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.sdc.api.v1.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.sdc.api.v1.model\Response', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * updateUsingPUT
     *
     * Atualiza um cart\u00C3\u00A3o
     *
     * @param int $id_conta ID da Conta (required)
     * @param \br.com.conductor.sdc.api.v1.model\Cartao $cartao Cart\u00C3\u00A3o a ser atualizado (required)
     * @return \br.com.conductor.sdc.api.v1.model\Cartao
     * @throws \br.com.conductor.sdc.api.v1.invoker\ApiException on non-2xx response
     */
    public function updateUsingPUT($id_conta, $cartao)
    {
        list($response, $statusCode, $httpHeader) = $this->updateUsingPUTWithHttpInfo ($id_conta, $cartao);
        return $response; 
    }


    /**
     * updateUsingPUTWithHttpInfo
     *
     * Atualiza um cart\u00C3\u00A3o
     *
     * @param int $id_conta ID da Conta (required)
     * @param \br.com.conductor.sdc.api.v1.model\Cartao $cartao Cart\u00C3\u00A3o a ser atualizado (required)
     * @return Array of \br.com.conductor.sdc.api.v1.model\Cartao, HTTP status code, HTTP response headers (array of strings)
     * @throws \br.com.conductor.sdc.api.v1.invoker\ApiException on non-2xx response
     */
    public function updateUsingPUTWithHttpInfo($id_conta, $cartao)
    {
        
        // verify the required parameter 'id_conta' is set
        if ($id_conta === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_conta when calling updateUsingPUT');
        }
        // verify the required parameter 'cartao' is set
        if ($cartao === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cartao when calling updateUsingPUT');
        }
  
        // parse inputs
        $resourcePath = "/v1/contas/{idConta}/cartoes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id_conta !== null) {
            $resourcePath = str_replace(
                "{" . "idConta" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_conta),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($cartao)) {
            $_tempBody = $cartao;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $headerParams['access_token'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\br.com.conductor.sdc.api.v1.model\Cartao'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\br.com.conductor.sdc.api.v1.invoker\ObjectSerializer::deserialize($response, '\br.com.conductor.sdc.api.v1.model\Cartao', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \br.com.conductor.sdc.api.v1.invoker\ObjectSerializer::deserialize($e->getResponseBody(), '\br.com.conductor.sdc.api.v1.model\Cartao', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
